{"version":3,"sources":["components/counter.component.js","components/navbar.component.js","components/users.component.js","components/login.component.js","App.js","serviceWorker.js","index.js"],"names":["reducer","state","action","operator","Counter","useReducer","count","dispatch","className","onClick","Navbar","href","data-target","data-toggle","id","to","userAccess","a","username","password","Promise","resolve","reject","setTimeout","loginReducer","type","fieldName","value","isLoading","isLoggedIn","error","initialState","LoginUseReducer","onSubmitLoginInfo","e","preventDefault","onSubmit","placeholder","onChange","target","required","disabled","App","path","component","Login","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.637f6fb1.chunk.js","sourcesContent":["import React, {useReducer} from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport '../App.css';\r\n\r\nconst PLUS =\"PLUS\";\r\nconst MINUS = \"MINUS\";\r\n\r\nfunction reducer(state, action){\r\n    switch(action.operator){\r\n        case PLUS:\r\n            return state + 1;\r\n        case MINUS:\r\n            return state<=0?0:state-1;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default function Counter (){\r\n    const [count, dispatch] = useReducer(reducer, 0);\r\n\r\n    function increment(){\r\n        return dispatch({operator:PLUS});\r\n    }\r\n    function decrement(){\r\n        return dispatch({operator:MINUS})\r\n    }\r\n    return(\r\n    <div className=\"container\">\r\n        <div className=\"counter-div\">\r\n            <h1 className=\"text-center pt-2 pb-3\">{count}</h1>\r\n            <div className=\"d-flex justify-content-center pt-5 btn-group\">\r\n                <button onClick={decrement} className=\"btn btn-danger\">Decrease by 1</button>\r\n                <button onClick={increment} className=\"btn btn-success\">Increase by 1</button>                \r\n            </div>\r\n        </div>       \r\n    </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'bootstrap/dist/js/bootstrap.bundle';\r\nimport 'jquery/dist/jquery';\r\n\r\nexport default function Navbar(){\r\n    return (\r\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n            <div className=\"container-fluid\">\r\n                <div className=\"navbar-header\">\r\n                    <a href=\"/react-usereducer/\" className=\"navbar-brand\">tradecoder</a>\r\n                </div>\r\n                    <button data-target=\"#main-menu\" data-toggle=\"collapse\" className=\"navbar-toggler\"><span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n                    <div id=\"main-menu\" className=\"collapse navbar-collapse\">\r\n                        <ul className=\"navbar-nav ml-auto\">\r\n                            <li className=\"nav-item\"><Link to=\"/react-usereducer/counter\" className=\"nav-link\">Counter</Link></li>\r\n                            <li className=\"nav-item\"><Link to=\"/react-usereducer/login\" className=\"nav-link\">Login</Link></li>\r\n                        </ul>\r\n                    </div>       \r\n            </div>\r\n        </nav>\r\n    );\r\n}","export default async function userAccess({ username, password }) {\r\n\r\n\r\n  const userdata = 'admin';\r\n  const userpassword = '12345678';\r\n    \r\n  return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (username === userdata && password === userpassword) {\r\n          resolve();\r\n        } else {\r\n          reject();\r\n        }\r\n      }, 1000);\r\n    });\r\n  }","import React, { useReducer } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport '../App.css';\r\nimport  userAccess from './users.component';\r\n\r\nfunction loginReducer(state, action) {\r\n  switch (action.type) {\r\n    case 'field': {return {\r\n        ...state, [action.fieldName]: action.value,\r\n      };\r\n    }\r\n    case 'login': {return {\r\n        ...state, isLoading: true, isLoggedIn:false, error:\"\"\r\n      };\r\n    }\r\n    case 'success': {return {\r\n        ...state, isLoading: false, isLoggedIn:true, error:\"\"\r\n      }; \r\n    }\r\n    case 'error': { return {\r\n        ...state, isLoggedIn: false, isLoading: false, error: 'Invalid username or password!',\r\n        username: \"\", password: \"\"\r\n      };\r\n    }\r\n    case 'logout': { return {\r\n        ...state, username:\"\", password:\"\", isLoading:false, isLoggedIn: false, error:\"\"\r\n      };\r\n    }\r\n    default: \r\n      return state;\r\n  }\r\n}\r\n\r\nconst initialState = {username: \"\", password: \"\", error:\"\", isLoading: false, isLoggedIn: false }; \r\n\r\nexport default function LoginUseReducer() {\r\n  const [state, dispatch] = useReducer(loginReducer, initialState);\r\n  const { username, password, error, isLoading, isLoggedIn } = state;\r\n\r\n  function onChangeUsername(e){\r\n      dispatch({type: 'field', fieldName: 'username', value: e.target.value})\r\n  };\r\n\r\n  function onChangePassword(e){\r\n      dispatch({type: 'field', fieldName: 'password', value: e.target.value})\r\n  };\r\n  function onClickLogout(e){\r\n      dispatch({type:'logout'})      \r\n  };\r\n\r\n  const onSubmitLoginInfo = async (e) => {\r\n    e.preventDefault();\r\n\r\n    dispatch({ type: 'login' });\r\n\r\n    try {\r\n      await userAccess({ username, password });\r\n      dispatch({ type: 'success' });      \r\n    } catch (error) {\r\n      dispatch({ type: 'error' });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"container\">\r\n        {isLoggedIn ? (\r\n            <div>\r\n                <h4 className=\"text-center\">Welcome {username}!</h4>\r\n                <button onClick={onClickLogout} className=\"btn btn-warning float-right\">Logout</button>\r\n            </div> ) : ( \r\n            <div className=\"login-container shadow\">\r\n                <form onSubmit={onSubmitLoginInfo}>                    \r\n                    <p className=\"text-center\">Login</p>\r\n                    {error && <p className=\"text-center text-danger\">{error}</p>}\r\n                    <div className=\"login-form-content\">\r\n                        <input type=\"text\" placeholder=\"username / admin\" value={username} onChange={onChangeUsername} className=\"form-control\" required/>\r\n                        <input type=\"password\" placeholder=\"password / 12345678\" value={password} onChange={onChangePassword} className=\"form-control\" required/>\r\n                    \r\n                        <button type=\"submit\" className=\"btn btn-primary form-control\" disabled={isLoading}>\r\n                        {isLoading ? \"Logging in...\" : \"Login\"}\r\n                    </button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}","import React from 'react';\nimport {BrowserRouter as Router, Route} from \"react-router-dom\";\nimport Counter from './components/counter.component';\nimport Navbar from './components/navbar.component';\nimport Login from './components/login.component';\n\n\nfunction App() { \n  return (    \n    <Router>\n      <Navbar />\n      <Route path=\"/react-usereducer/login\" component = {Login} />\n      <Route path=\"/react-usereducer/counter\" component = {Counter} />      \n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}