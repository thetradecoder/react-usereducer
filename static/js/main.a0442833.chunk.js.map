{"version":3,"sources":["components/counter.component.js","components/navbar.component.js","App.js","serviceWorker.js","index.js"],"names":["reducer","state","action","operator","Counter","useReducer","count","dispatch","className","onClick","Navbar","href","data-target","data-toggle","id","to","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oQAOA,SAASA,EAAQC,EAAOC,GACpB,OAAOA,EAAOC,UACV,IALI,OAMA,OAAOF,EAAQ,EACnB,IANM,QAOF,OAAOA,GAAO,EAAE,EAAEA,EAAM,EAC5B,QACI,OAAOA,GAIJ,SAASG,IAAW,IAAD,EACJC,qBAAWL,EAAS,GADhB,mBACvBM,EADuB,KAChBC,EADgB,KAS9B,OACA,yBAAKC,UAAU,aACX,6BACI,4BAAKF,GACL,4BAAQG,QAVhB,WACI,OAAOF,EAAS,CAACJ,SAlBb,UA2B4BK,UAAU,mBAAtC,OACA,4BAAQC,QARhB,WACI,OAAOF,EAAS,CAACJ,SApBX,WA2B0BK,UAAU,kBAAtC,S,YC1BG,SAASE,IACpB,OACI,yBAAKF,UAAU,+CACX,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,iBACX,uBAAGG,KAAK,qBAAqBH,UAAU,gBAAvC,eAGA,4BAAQI,cAAY,aAAaC,cAAY,WAAWL,UAAU,kBAAiB,0BAAMA,UAAU,yBAC/F,yBAAKM,GAAG,YAAYN,UAAU,4BAC1B,wBAAIA,UAAU,sBACV,wBAAIA,UAAU,YAAW,kBAAC,IAAD,CAAMO,GAAG,4BAA4BP,UAAU,YAA/C,gBCF1CQ,MATf,WACE,OACE,kBAAC,IAAD,KACE,kBAACN,EAAD,MACA,kBAAC,IAAD,CAAOO,KAAK,4BAA4BC,UAAad,MCEvCe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a0442833.chunk.js","sourcesContent":["import React, {useState, useReducer} from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nconst PLUS =\"PLUS\";\r\nconst MINUS = \"MINUS\";\r\n\r\nfunction reducer(state, action){    \r\n    switch(action.operator){\r\n        case PLUS:\r\n            return state + 1;\r\n        case MINUS:\r\n            return state<=0?0:state-1;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default function Counter (){\r\n    const [count, dispatch] = useReducer(reducer, 0);\r\n\r\n    function increment(){\r\n        return dispatch({operator:PLUS});\r\n    }\r\n    function decrement(){\r\n        return dispatch({operator:MINUS})\r\n    }\r\n    return(\r\n    <div className=\"container\">\r\n        <div>\r\n            <h1>{count}</h1>\r\n            <button onClick={increment} className=\"btn btn-success\">Inc</button>\r\n            <button onClick={decrement} className=\"btn btn-danger\">Inc</button>\r\n        </div>\r\n    </div>\r\n    );\r\n}","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'bootstrap/dist/js/bootstrap.bundle';\r\nimport 'jquery/dist/jquery';\r\n\r\nexport default function Navbar(){\r\n    return (\r\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n            <div className=\"container-fluid\">\r\n                <div className=\"navbar-header\">\r\n                    <a href=\"/react-usereducer/\" className=\"navbar-brand\">tradecoder</a>\r\n                </div>\r\n\r\n                    <button data-target=\"#main-menu\" data-toggle=\"collapse\" className=\"navbar-toggler\"><span className=\"navbar-toggler-icon\"></span></button>\r\n                        <div id=\"main-menu\" className=\"collapse navbar-collapse\">\r\n                            <ul className=\"navbar-nav ml-auto\">\r\n                                <li className=\"nav-item\"><Link to=\"/react-usereducer/counter\" className=\"nav-link\">Counter</Link></li>\r\n                            </ul>\r\n                        </div>       \r\n            </div>\r\n        </nav>\r\n    );\r\n}","import React from 'react';\nimport {BrowserRouter as Router, Route} from \"react-router-dom\";\nimport Counter from './components/counter.component';\nimport Navbar from './components/navbar.component';\n\n\nfunction App() { \n  return (    \n    <Router>\n      <Navbar />\n      <Route path=\"/react-usereducer/counter\" component = {Counter} />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}