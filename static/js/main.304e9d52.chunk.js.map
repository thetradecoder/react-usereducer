{"version":3,"sources":["components/counter.component.js","components/navbar.component.js","components/login.component.js","App.js","serviceWorker.js","index.js"],"names":["reducer","state","action","operator","Counter","useReducer","count","dispatch","className","onClick","Navbar","href","data-target","data-toggle","id","to","loginReducer","type","field","value","isLoading","error","isLoggedIn","username","password","initialState","Login","onSubmit","e","preventDefault","onChange","target","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.304e9d52.chunk.js","sourcesContent":["import React, {useReducer} from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport '../App.css';\r\n// import ReactMarkdown from 'react-markdown';\r\n// import counterText from './counter-markdown.component.js'\r\n\r\n\r\n\r\n\r\n\r\nconst PLUS =\"PLUS\";\r\nconst MINUS = \"MINUS\";\r\n\r\nfunction reducer(state, action){\r\n    switch(action.operator){\r\n        case PLUS:\r\n            return state + 1;\r\n        case MINUS:\r\n            return state<=0?0:state-1;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default function Counter (){\r\n    const [count, dispatch] = useReducer(reducer, 0);\r\n\r\n    function increment(){\r\n        return dispatch({operator:PLUS});\r\n    }\r\n    function decrement(){\r\n        return dispatch({operator:MINUS})\r\n    }\r\n    return(\r\n    <div className=\"container\">\r\n        <div className=\"counter-div\">\r\n            <h1 className=\"text-center pt-2 pb-3\">{count}</h1>\r\n            <div className=\"d-flex justify-content-center pt-5 btn-group\">\r\n                <button onClick={decrement} className=\"btn btn-danger\">Decrease by 1</button>\r\n                <button onClick={increment} className=\"btn btn-success\">Increase by 1</button>                \r\n            </div>\r\n        </div>\r\n        <div>\r\n            {/* <ReactMarkdown source={counterText}/> */}\r\n        </div>\r\n    </div>\r\n    );\r\n}","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'bootstrap/dist/js/bootstrap.bundle';\r\nimport 'jquery/dist/jquery';\r\n\r\nexport default function Navbar(){\r\n    return (\r\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n            <div className=\"container-fluid\">\r\n                <div className=\"navbar-header\">\r\n                    <a href=\"/react-usereducer/\" className=\"navbar-brand\">tradecoder</a>\r\n                </div>\r\n                    <button data-target=\"#main-menu\" data-toggle=\"collapse\" className=\"navbar-toggler\"><span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n                    <div id=\"main-menu\" className=\"collapse navbar-collapse\">\r\n                        <ul className=\"navbar-nav ml-auto\">\r\n                            <li className=\"nav-item\"><Link to=\"/react-usereducer/counter\" className=\"nav-link\">Counter</Link></li>\r\n                            <li className=\"nav-item\"><Link to=\"/react-usereducer/login\" className=\"nav-link\">Login</Link></li>\r\n                        </ul>\r\n                    </div>       \r\n            </div>\r\n        </nav>\r\n    );\r\n}","import React, {useState, useReducer} from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nfunction loginReducer(state, action){\r\n    switch(action.type){\r\n        case 'field':{\r\n            return {\r\n                ...state, \r\n                [action.field]:action.value\r\n            }\r\n        };\r\n        case 'login':{\r\n            return {...state,\r\n                isLoading:true,\r\n                error:\"\"\r\n            }\r\n        };\r\n        case 'logout':{\r\n            return {\r\n                ...state, \r\n                isLoading:false,\r\n                error:false,\r\n                isLoggedIn:false\r\n            }\r\n        }\r\n        case 'success':{\r\n            return {...state,\r\n                isLoading:false,\r\n                error:\"\",\r\n                isLoggedIn:true            \r\n            }\r\n        };\r\n        case 'error':{\r\n            return {...state,\r\n                error: \"username or password is wrong!\",\r\n                isLoading:false,\r\n                isLoggedIn:false,\r\n                username:\"\",\r\n                password:\"\"     \r\n            }\r\n        };\r\n        default:\r\n            break;\r\n    }\r\n    return state;\r\n\r\n}\r\n\r\nconst initialState = {\r\n    username:\"\",\r\n    password:\"\",\r\n    isLoading:false,\r\n    isLoggedIn:false,\r\n    error:\"\"\r\n}\r\n\r\n\r\nexport default function Login(){\r\n\r\n    const [state, dispatch] = useReducer(loginReducer, initialState);\r\n    const {username, password, isLoading, isLoggedIn, error}=state;\r\n\r\n    function onSubmitLoginInfo(e){\r\n        e.preventDefault();\r\n        dispatch({type:'login'});\r\n    }\r\n    function onChangeUsername(e){\r\n        dispatch({type:'field', field:'username', value:e.target.value})\r\n    }\r\n    function onChangePassword(e){\r\n        dispatch({type:'field', field:'password', value:e.target.value})\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"login-container\">\r\n                {isLoggedIn?(<div><h2>Welcome {username}!</h2>\r\n                <button onClick={()=>dispatch({type:'logout'})}>Logout</button></div>): (\r\n                <form onSubmit={onSubmitLoginInfo}>\r\n                    <h5>Login</h5>\r\n                    <input type=\"text\" value={username} onChange={onChangeUsername} className=\"form-control\"/>                    \r\n                      <input type=\"password\" value={password} onChange={onChangePassword} className=\"form-control\"/> \r\n                    <button type=\"submit\" className=\"form-control btn btn-primary\">Login</button>\r\n                </form>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from 'react';\nimport {BrowserRouter as Router, Route} from \"react-router-dom\";\nimport Counter from './components/counter.component';\nimport Navbar from './components/navbar.component';\nimport Login from './components/login.component';\n\n\nfunction App() { \n  return (    \n    <Router>\n      <Navbar />\n      <Route path=\"/react-usereducer/login\" component = {Login} />\n      <Route path=\"/react-usereducer/counter\" component = {Counter} />      \n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}